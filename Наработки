async def on_startup(_): #—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞—é—â–∞—è –ø—Ä–∏–≤–µ—Å—Ç–≤–∏–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
    print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ on_startup=on_startup
if __name__ == '__main__':
   executor.start_polling(dp, on_startup=on_startup)

@dp.message_handler() #–≠—Ö–æ –±–æ—Ç –≤ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é ... –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–∞–º —Ç–æ —á—Ç–æ –º—ã –µ–º—É –ø—Ä–∏—Å–ª–∞–ª–∏
async def echo(message: types.Message):
    await message.answer(text=message.text) #–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

@dp.message_handler()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç—Ö–æ –±–æ—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
async def echo_upper(message: types.Message):
    if message.text.count('') >= 1: # –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤ –Ω–µ–º –±–æ–ª—å—à–µ 1 —Å–ª–æ–≤–∞, –Ω–µ –∑–∞–±—ã–≤–∞–µ–º —á—Ç–æ —Å—á–∏—Ç–∞–µ–º –æ—Ç 0
        await message.answer(text=message.text)

@dp.message_handler()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç—Ö–æ –±–æ—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
async def echo_upper(message: types.Message):
    await message.answer(text=message.text.upper())



HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
""" # –°–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —á—Ç–æ –±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∏—Ö –≤ —Ñ—É–Ω–∫—Ü–∏—é

@dp.message_handler(commands=['description']) #–ü–æ –∫–æ–º–∞–Ω–¥–µ /description –í—ã–≤–æ–¥–∏—Ç —Ç–æ —á—Ç–æ –º—ã –Ω–∞—É—á–∏–ª–∏ –¥–µ–ª–∞—Ç—å –±–æ—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π)
async def desc_comand(message: types.Message):
    await message.answer('–î–∞–Ω–Ω—ã–π –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ ')
    await message.delete()

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(text=HELP_COMMAND) #reply - –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ–º –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

@dp.message_handler(commands=['start'])
async def help_command(message: types.Message):
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç")
    await message.delete() #–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ answer –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –±–æ—Ç—É


@dp.message_handler() #–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–∞
async def send_random_letter(message: types.Message):
    await message.reply(random.choice(string.ascii_letters))



count = 0 #–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é count

@dp.message_handler(commands=['count']) #–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤ –±–æ—Ç–∞
async  def check_count(message: types.Message):
    global count
    await  message.answer(f'COUNT: {count}')
    count += 1

@dp.message_handler() #–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–¥–µ—Ä–∂–∏—Ç—å—Å—è –ª–∏ –≤ –≤–µ–¥–µ–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 0... –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª—é–±–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
async def check_zero(message: types.Message):
    if '0' in message.text:
        await message.reply('YES')
    else:
        await message.reply('NO')


@dp.message_handler(commands=['start']) #–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def start_command(message: types.Message):
    await message.answer('<em>–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!</em>', parse_mode="HTML")
#('<em>–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!</em>', parse_mode="HTML") parser_mode –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ç–∏–ø—É HTML


@dp.message_handler(commands=['give']) #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É give
async def start_command(message: types.Message):
    await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEG5RVjoLxDtsexaNuvodBr4kEh-TphBwACTRYAAnJ3wEiqLAI1EPSbGSwE")
    await message.delete()# –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –±—ã –Ω–µ –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–ø–∞–º–∞
#–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ç–∏–∫–µ—Ä–æ–≤ –±–µ—Ä–µ–º —É –±–æ—Ç–∞ https://t.me/idstickerbot

@dp.message_handler() #—ç—Ö–æ –±–æ—Ç + —ç–º–æ–¥–∑–∏ —Å –∞–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_emoji(message: types.Message):
    await message.reply(message.text + 'üëç')
    await message.delete()

@dp.message_handler(content_types=['sticker'])#–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∞–π–¥–∏ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –≤—Ö–æ–¥—è—â–µ–º—É —Å—Ç–∏–∫–µ—Ä—É
async def send_sticker_id(message: types.Message):
    await message.answer(message.sticker.file_id)
